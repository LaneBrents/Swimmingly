{"version":3,"sources":["components/ErrorMessage/ErrorMessage.jsx","utils/tokenService.js","utils/userService.js","pages/SignupPage/SignupPage.jsx","pages/LoginPage/LoginPage.jsx","components/Header/Header.jsx","components/Swimmer/Swimmer.jsx","pages/MyTeam/MyTeam.jsx","components/AddSwimmer/AddSwimmer.jsx","components/SwimmerGallery/SwimmerGallery.jsx","utils/swimmerAPI.js","pages/Home/Home.jsx","pages/App/App.jsx","serviceWorker.js","index.js"],"names":["ErrorMessage","props","className","error","getToken","token","localStorage","getItem","JSON","parse","atob","split","exp","Date","now","removeItem","tokenService","setToken","setItem","removeToken","getUserFromToken","user","BASE_URL","userService","signup","fetch","method","body","then","res","ok","json","response","console","log","Error","err","logout","login","creds","headers","Headers","stringify","getUser","getProfile","username","Authorization","isPasswordMatch","passwordOne","passwordConf","SignUpPage","useState","message","passwordError","setError","email","password","state","setState","selectedFile","setSelectedFile","handleChange","e","target","name","value","navigate","useNavigate","a","preventDefault","key","formData","FormData","append","handleSignUpOrLogin","Grid","textAlign","style","height","width","verticalAlign","Column","maxWidth","Header","as","color","Image","src","Form","onSubmit","Segment","stacked","Input","placeholder","onChange","required","type","Field","files","Button","LoginPage","fluid","size","Message","to","PageHeader","loggedUser","handleLogout","floated","Icon","onClick","fontSize","fontFamily","textShadow","SwimmerComponent","swimmer","handleDeleteSwimmer","Card","raised","grade","gender","events","request","_id","MyTeam","AddSwimmer","handleAddSwimmer","SwimmerGallery","swimmers","itemsPerRow","Group","stackable","map","create","deleteSwimmer","swimmerId","getSwimmers","Home","setSwimmers","swimmerAPI","data","useEffect","Container","alt","Row","centered","App","setUser","path","element","loggedInUser","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"6UAEe,SAASA,EAAaC,GACjC,OAAO,sBAAMC,UAAW,QAAjB,SAA2BD,EAAME,OAC3C,C,0DCKC,SAASC,IACP,IAAIC,EAAQC,aAAaC,QAAQ,SAC7BF,IAGcG,KAAKC,MAAMC,KAAKL,EAAMM,MAAM,KAAK,KAErCC,IAAMC,KAAKC,MAAQ,MAC7BR,aAAaS,WAAW,SACxBV,EAAQ,OAGZ,OAAOA,CACR,CAWD,IAOeW,EAPM,CACnBC,SAlCJ,SAAkBZ,GACVA,EAEFC,aAAaY,QAAQ,QAASb,GAE9BC,aAAaS,WAAW,QAE3B,EA4BCX,WACAe,YAPF,WACEb,aAAaS,WAAW,QACzB,EAMCK,iBAbF,WACE,IAAMf,EAAQD,IACd,OAAOC,EAAQG,KAAKC,MAAMC,KAAKL,EAAMM,MAAM,KAAK,KAAKU,KAAO,IAC7D,GCzBGC,EAAW,cAwEjB,IAQeC,EARK,CAClBC,OArDF,SAAgBH,GACd,OAAOI,MAAMH,EAAW,SAAU,CAChCI,OAAQ,OACRC,KAAMN,IAEPO,MAAK,SAAAC,GACJ,OAAIA,EAAIC,GAAWD,EAAIE,OAOhBF,EAAIE,OAAOH,MAAK,SAAAI,GAErB,MADAC,QAAQC,IAAIF,GACN,IAAIG,MAAMH,EAASI,IAC1B,GACF,IAEAR,MAAK,gBAAEvB,EAAF,EAAEA,MAAF,OAAaW,EAAaC,SAASZ,EAAnC,GAKP,EA8BCgC,OAxBF,WACErB,EAAaG,aACd,EAuBCmB,MArBF,SAAeC,GACb,OAAOd,MAAMH,EAAW,QAAS,CAC/BI,OAAQ,OACRc,QAAS,IAAIC,QAAQ,CAAC,eAAgB,qBACtCd,KAAMnB,KAAKkC,UAAUH,KAEtBX,MAAK,SAAAC,GAEJ,OAAIA,EAAIC,GAAWD,EAAIE,OAChBF,EAAIE,OAAOH,MAAK,SAAAI,GAErB,MADAC,QAAQC,IAAIF,GACN,IAAIG,MAAMH,EAASI,IAC1B,GACF,IACAR,MAAK,gBAAEvB,EAAF,EAAEA,MAAF,OAAaW,EAAaC,SAASZ,EAAnC,GACP,EAOCsC,QA9BF,WACE,OAAO3B,EAAaI,kBACrB,EA6BCwB,WA1EF,SAAoBC,GAElB,OADAZ,QAAQC,IAAI,sBACLT,MAAMH,EAAWuB,EAAU,CAChCL,QAAS,CACPM,cAAe,UAAY9B,EAAaZ,cAGzCwB,MAAK,SAAAC,GAEN,GAAGA,EAAIC,GAAI,OAAOD,EAAIE,OACtB,MAAM,IAAII,MAAM,4DACjB,GACF,GCVD,SAASY,EAAgBC,EAAaC,GACpC,OAAOD,IAAgBC,CACxB,CAEc,SAASC,EAAWjD,GACjC,MAA0BkD,mBAAS,CACjCC,QAAS,GACTC,eAAe,IAFjB,mBAAOlD,EAAP,KAAcmD,EAAd,KAKA,EAA0BH,mBAAS,CACjCN,SAAU,GACVU,MAAO,GACPC,SAAU,GACVP,aAAc,KAJhB,mBAAOQ,EAAP,KAAcC,EAAd,KAOA,EAAwCP,mBAAS,IAAjD,mBAAOQ,EAAP,KAAqBC,EAArB,KAEA,SAASC,EAAaC,GACpBJ,EAAS,2BACJD,GADG,kBAELK,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,QAE7B,CAED,IAAMC,EAAWC,cAtBuB,4CAwBxC,WAA4BL,GAA5B,iBAAAM,EAAA,yDACEN,EAAEO,iBAEGtB,EAAgBU,EAAMD,SAAUC,EAAMR,cAH7C,yCAGmEK,EAAS,CAAEF,QAAS,wBAAyBC,eAAe,KAH/H,OAUE,IAASiB,KANThB,EAAS,CAAEF,QAAS,GAAIC,eAAe,KAEjCkB,EAAW,IAAIC,UAEZC,OAAO,QAASd,GAETF,EACdc,EAASE,OAAOH,EAAKb,EAAMa,IAX/B,0BAeU/C,EAAYC,OAAO+C,GAf7B,QAiBItE,EAAMyE,sBAENR,EAAS,KAnBb,kDAsBIjC,QAAQC,IAAR,MACAoB,EAAS,CAAEF,QAAS,KAAIA,QAASC,eAAe,IAvBpD,2DAxBwC,sBAwDxC,OACE,cAACsB,EAAA,EAAD,CACEC,UAAU,SACVC,MAAO,CAAEC,OAAQ,QAASC,MAAO,SACjCC,cAAc,SAHhB,SAKE,eAACL,EAAA,EAAKM,OAAN,CAAaJ,MAAO,CAAEK,SAAU,KAAhC,UACE,eAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,MAAM,OAAOT,UAAU,SAAvC,UACE,cAACU,EAAA,EAAD,CAAOC,IAAI,oCADb,cAGA,eAACC,EAAA,EAAD,CAAMC,SAlE4B,4CAkElC,UACE,eAACC,EAAA,EAAD,CAASC,SAAO,EAAhB,UACE,cAACH,EAAA,EAAKI,MAAN,CACE5B,KAAK,WACL6B,YAAY,WACZ5B,MAAOR,EAAMZ,SACbiD,SAAUjC,EACVkC,UAAQ,IAEV,cAACP,EAAA,EAAKI,MAAN,CACEI,KAAK,QACLhC,KAAK,QACL6B,YAAY,QACZ5B,MAAOR,EAAMF,MACbuC,SAAUjC,EACVkC,UAAQ,IAEV,cAACP,EAAA,EAAKI,MAAN,CACEzF,MAAOA,EAAMkD,cACbW,KAAK,WACLgC,KAAK,WACLH,YAAY,WACZ5B,MAAOR,EAAMD,SACbsC,SAAUjC,EACVkC,UAAQ,IAEV,cAACP,EAAA,EAAKI,MAAN,CACEzF,MAAOA,EAAMkD,cACbW,KAAK,eACLgC,KAAK,WACLH,YAAY,mBACZ5B,MAAOR,EAAMR,aACb6C,SAAUjC,EACVkC,UAAQ,IAEV,cAACP,EAAA,EAAKS,MAAN,UACE,cAACT,EAAA,EAAKI,MAAN,CACEI,KAAK,OACLhC,KAAK,QACL6B,YAAY,eACZC,SAvDd,SAAyBhC,GACvB7B,QAAQC,IAAI4B,EAAEC,OAAOmC,MAAO,gCAC5BtC,EAAgBE,EAAEC,OAAOmC,MAAM,GAChC,MAuDS,cAACC,EAAA,EAAD,CAAQH,KAAK,SAAS9F,UAAU,MAAhC,uBAIDC,EAAMiD,QAAU,cAACpD,EAAD,CAAcG,MAAOA,EAAMiD,UAAc,YAKnE,C,4BClHc,SAASgD,EAAUnG,GAChC,MAA0BkD,mBAAS,IAAnC,mBAAOhD,EAAP,KAAcmD,EAAd,KACA,EAA0BH,mBAAS,CACjCI,MAAO,GACPC,SAAU,KAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAKMQ,EAAWC,cAEjB,SAASN,EAAaC,GACpBJ,EAAS,2BACJD,GADG,kBAELK,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,QAE7B,CAdsC,4CAgBvC,WAA4BH,GAA5B,SAAAM,EAAA,6DACEN,EAAEO,iBADJ,kBAIU9C,EAAYe,MAAMmB,GAJ5B,OAMIxD,EAAMyE,sBAENR,EAAS,KARb,gDAaIZ,EAAS,KAAIF,SAbjB,0DAhBuC,sBAiCvC,OACI,cAACuB,EAAA,EAAD,CACEC,UAAU,SACVC,MAAO,CAAEC,OAAQ,QAASC,MAAO,SACjCC,cAAc,SAHhB,SAKE,eAACL,EAAA,EAAKM,OAAN,CAAaJ,MAAO,CAAEK,SAAU,KAAhC,UACE,eAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,MAAM,OAAOT,UAAU,SAAvC,UACE,cAACU,EAAA,EAAD,CAAOC,IAAI,oCADb,6BAIA,cAACC,EAAA,EAAD,CAAMC,SA5CyB,4CA4C/B,SACE,eAACC,EAAA,EAAD,CAASC,SAAO,EAAhB,UACE,cAACH,EAAA,EAAKI,MAAN,CACEI,KAAK,QACLhC,KAAK,QACL6B,YAAY,QACZ5B,MAAOR,EAAMF,MACbuC,SAAUjC,EACVkC,UAAQ,IAEV,cAACP,EAAA,EAAKI,MAAN,CACE5B,KAAK,WACLgC,KAAK,WACLH,YAAY,WACZ5B,MAAOR,EAAMD,SACbsC,SAAUjC,EACVkC,UAAQ,IAEV,cAACI,EAAA,EAAD,CACEd,MAAM,OACNgB,OAAK,EACLC,KAAK,QACLN,KAAK,SACL9F,UAAU,MALZ,wBAWJ,eAACqG,EAAA,EAAD,yBACa,cAAC,IAAD,CAAMC,GAAG,UAAT,wBAEZrG,EAAQ,cAACH,EAAD,CAAcG,MAAOA,IAAY,SAInD,C,YC3Fc,SAASsG,EAAT,GAAmD,IAA7BC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,aAE7C,OADA1E,QAAQC,IAAIwE,EAAY,wBAEpB,qCACI,cAACvB,EAAA,EAAD,CAAQC,GAAG,KAAKwB,QAAQ,OAAxB,SACI,cAAC,IAAD,CAAMJ,GAAG,IAAT,SACI,cAACK,EAAA,EAAD,CAAMhC,MAAO,CAAEQ,MAAO,SAAWrB,KAAK,aAI9C,cAACmB,EAAA,EAAD,CAAQC,GAAG,KAAKwB,QAAQ,SAAxB,SACKF,EACG,mCACI,cAAC,IAAD,CAAMF,GAAG,IAAT,sBAIJ,OAGR,cAACrB,EAAA,EAAD,CAAQC,GAAG,KAAKwB,QAAQ,QAAxB,SACI,cAAC,IAAD,CAAMJ,GAAG,GAAGM,QAASH,EAAc9B,MAAO,CAAEkC,SAAU,OAAQC,WAAY,sBAAuB3B,MAAO,aAAc4B,WAAY,qBAAlI,wBAkBf,C,aCxCc,SAASC,EAAT,GAA6D,IAAjCC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,oBAEhD,EAAmBjE,oBAAS,GAArBO,EAAP,oBAYA,OACI,eAAC2D,EAAA,EAAD,CAAwBC,QAAM,EAA9B,UACI,eAAC5B,EAAA,EAAD,CAASd,UAAU,SAAnB,UACI,uCAAUuC,EAAQnD,QAClB,wCAAWmD,EAAQI,SACnB,yCAAYJ,EAAQK,UACpB,yCAAYL,EAAQM,aAExB,cAACjC,EAAA,EAAD,CAAMC,SAjBd,SAAsB3B,GAClBA,EAAEO,iBACF,IAAMqD,EAAUP,EAAQQ,IACxB1F,QAAQC,IAAIwF,EAAS,gCACrBN,EAAoBM,GACpBhE,GAAS,EACZ,EAWO,SACI,cAACyC,EAAA,EAAD,CAAQH,KAAK,SAASX,MAAM,MAA5B,gCARG8B,EAAQQ,IAY1B,CCzBc,SAASC,EAAT,GAA8B,IAAZT,EAAW,EAAXA,QAC7B,OACI,qCACI,cAACV,EAAD,IACA,iDACA,cAACS,EAAD,CAAkBC,QAASA,MAGtC,C,6BCTc,SAASU,EAAT,GAA2C,IAArBC,EAAoB,EAApBA,iBAIjC,EAA0B3E,mBAAS,CAC/Ba,KAAM,GACNuD,MAAO,GACPC,OAAQ,GACRC,OAAQ,KAJZ,mBAAOhE,EAAP,KAAcC,EAAd,KAOA,SAASG,EAAaC,GAClBJ,EAAS,2BACFD,GADC,kBAEHK,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,QAEjC,CAgBG,OACI,cAACoD,EAAA,EAAD,CAAMxC,MAAO,CAACE,MAAM,OAApB,SACI,eAACS,EAAA,EAAD,CAAMC,SAhBlB,SAAsB3B,GAElBA,EAAEO,iBAEFyD,EADoBrE,GAEpBC,EAAS,CACLM,KAAM,GACNuD,MAAO,GACPC,OAAQ,GACRC,OAAQ,IAEf,EAKW,UACI,oDACA,cAACjC,EAAA,EAAKI,MAAN,CACI1F,UAAU,eACV8D,KAAK,OACLC,MAAOR,EAAMO,KACb6B,YAAY,OACZC,SAAUjC,EACVkC,UAAQ,IAEZ,cAACP,EAAA,EAAKI,MAAN,CACI1F,UAAU,eACV8D,KAAK,QACLC,MAAOR,EAAM8D,MACb1B,YAAY,QACZC,SAAUjC,EACVkC,UAAQ,IAEZ,cAACP,EAAA,EAAKI,MAAN,CACI1F,UAAU,eACV8D,KAAK,SACLC,MAAOR,EAAM+D,OACb3B,YAAY,SACZC,SAAUjC,EACVkC,UAAQ,IAEZ,cAACP,EAAA,EAAKI,MAAN,CACI1F,UAAU,eACV8D,KAAK,SACLC,MAAOR,EAAMgE,OACb5B,YAAY,SACZC,SAAUjC,EACVkC,UAAQ,IAEZ,cAACI,EAAA,EAAD,CAAQH,KAAK,SAAS9F,UAAU,MAAhC,6BAIf,CCxEU,SAAS6H,EAAT,GAAyE,IAA/CC,EAA8C,EAA9CA,SAAUC,EAAoC,EAApCA,YAAab,EAAuB,EAAvBA,oBAE5D,OACI,mCACI,cAACC,EAAA,EAAKa,MAAN,CAAYD,YAAaA,EAAaE,WAAS,EAA/C,SACKH,EAASI,KAAI,SAACjB,GACX,OACI,cAACD,EAAD,CACIC,QAASA,EAETC,oBAAqBA,GADhBD,EAAQQ,IAIxB,OAIhB,CCnBD,IAAMrG,EAAW,eAEV,SAAS+G,EAAOlB,GAEnB,OADAlF,QAAQC,IAAI,sBAAuBiF,GAC5B1F,MAAMH,EAAU,CACnBI,OAAQ,OACRC,KAAMnB,KAAKkC,UAAUyE,GACrB3E,QAAS,CACL,eAAgB,mBAChB,cAAiB,UAAYxB,EAAaZ,cAE/CwB,MAAM,SAAAC,GACL,GAAGA,EAAIC,GAAI,OAAOD,EAAIE,OAEtB,MAAM,IAAII,MAAM,wCACnB,GACJ,CAEQ,SAASmG,EAAcC,GAC5B,OAAO9G,MAAM,GAAD,OAAIH,EAAJ,YAAgBiH,GAAa,CACvC7G,OAAQ,SACRc,QAAS,CACP,eAAgB,mBAChBM,cAAe,UAAY9B,EAAaZ,cAEzCwB,MAAK,SAACC,GACP,GAAIA,EAAIC,GAAI,OAAOD,EAAIE,OAEvB,MAAM,IAAII,MAAMN,EAAI1B,MAAO,gDAC5B,GACF,CAEM,SAASqI,IACd,OAAO/G,MAAMH,EAAU,CACrBkB,QAAS,CACP,eAAgB,mBAChBM,cAAe,UAAY9B,EAAaZ,cAEzCwB,MAAK,SAACC,GACP,OAAIA,EAAIC,GAAWD,EAAIE,OAEhBF,EAAIE,OAAOH,MAAK,SAACI,GAEtB,MADAC,QAAQC,IAAIF,GACN,IAAIG,MAAMH,EAASI,IAAK,uCAC/B,GACF,GACF,CCvCY,SAASqG,EAAT,GAAiC,IAAjB9B,EAAgB,EAAhBA,aAE3B,EAAgCxD,mBAAS,IAAzC,mBAAO6E,EAAP,KAAiBU,EAAjB,KAF2C,SAI5BF,IAJ4B,2EAI3C,4BAAApE,EAAA,+EAE+BuE,IAF/B,OAEc3G,EAFd,OAGQ0G,EAAY,YAAI1G,EAAS4G,OAHjC,gDAKQ3G,QAAQC,IAAR,KAAiB,0BALzB,0DAJ2C,kEAkB3C,WAAgCiF,GAAhC,eAAA/C,EAAA,+EAE+BuE,EAAkBxB,GAFjD,OAEcnF,EAFd,OAGQC,QAAQC,IAAIF,GACZwG,IAJR,gDAOQvG,QAAQC,IAAI,2CAAZ,MAPR,0DAlB2C,kEA6B3C,WAAmCiF,GAAnC,eAAA/C,EAAA,+EAE+BuE,EAAyBxB,GAFxD,OAEcnF,EAFd,OAGQC,QAAQC,IAAIF,GACZwG,IAJR,gDAMQvG,QAAQC,IAAI,6CANpB,0DA7B2C,sBAuC3C,OA1BA2G,qBAAU,WAENL,GACH,GAAE,IAwBC,eAACM,EAAA,EAAD,CAAW5I,UAAU,gBAArB,UACI,qBAAKA,UAAU,gBAAgBqF,IAAK,kCAAmCwD,IAAI,QAE3E,cAACtC,EAAD,CAAYE,aAAcA,IAC1B,uBACA,sBAAKzG,UAAU,cAAf,UACI,wDACA,0IACA,0BAEJ,eAACyE,EAAA,EAAD,WACI,cAACA,EAAA,EAAKqE,IAAN,CAAUC,UAAQ,EAAlB,SACI,cAACpB,EAAD,CAAY3H,UAAU,aAAa4H,iBApDR,gDAsD/B,cAACnD,EAAA,EAAKqE,IAAN,CAAUC,UAAQ,EAAlB,SACI,cAACtE,EAAA,EAAKM,OAAN,CAAaJ,MAAO,CAAEK,SAAU,KAAhC,SACI,cAAC6C,EAAD,CACIC,SAAUA,EACVZ,oBA1DmB,4CA2DnBa,YAAa,aAOxC,CCAciB,MA7Df,WACE,MAAwB/F,mBAAS5B,EAAYoB,WAA7C,mBAAOtB,EAAP,KAAa8H,EAAb,KAIA,SAASzE,IACPyE,EAAQ5H,EAAYoB,UACrB,CAED,SAASgE,IACPpF,EAAYc,SACZ8G,EAAQ,KACT,CAED,OAAI9H,EAEA,eAAC,IAAD,WACE,cAAC,IAAD,CACE+H,KAAK,IACLC,QAAS,cAAC,EAAD,CAAMC,aAAcjI,EAAMsF,aAAcA,MAEnD,cAAC,IAAD,CACEyC,KAAK,QACLC,QAAS,cAACzB,EAAD,CAAY0B,aAAcjI,EAAMsF,aAAcA,MAEzD,cAAC,IAAD,CACEyC,KAAK,SACLC,QAAS,cAAC,EAAD,CAAW3E,oBAAqBA,MAE3C,cAAC,IAAD,CACE0E,KAAK,UACLC,QAAS,cAAC,EAAD,CAAY3E,oBAAqBA,SAgBhD,eAAC,IAAD,WACE,cAAC,IAAD,CACE0E,KAAK,SACLC,QAAS,cAAC,EAAD,CAAW3E,oBAAqBA,MAE3C,cAAC,IAAD,CACE0E,KAAK,UACLC,QAAS,cAAC,EAAD,CAAY3E,oBAAqBA,MAE5C,cAAC,IAAD,CAAO0E,KAAK,KAAKC,QAAS,cAAC,IAAD,CAAU7C,GAAG,eAG5C,EC7DmB+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAD,UAAQ,cAAC,EAAD,MACRC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtI,MAAK,SAAAuI,GACJA,EAAaC,YACd,IACAC,OAAM,SAAAlK,GACL8B,QAAQ9B,MAAMA,EAAMiD,QACrB,G","file":"static/js/main.ddecb0de.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function ErrorMessage(props){\n    return <span className={\"error\"}>{props.error}</span>\n}","function setToken(token) {\n    if (token) {\n      // localStorage is given to us by the browser\n      localStorage.setItem('token', token);\n    } else {\n      localStorage.removeItem('token');\n    }\n  }\n  \n  function getToken() {\n    let token = localStorage.getItem('token');\n    if (token) {\n      // Check if expired, remove if it is\n      // atob is a function that decodes a base-64 string\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      // JWT's exp is expressed in seconds, not milliseconds, so convert\n      if (payload.exp < Date.now() / 1000) {\n        localStorage.removeItem('token');\n        token = null;\n      }\n    }\n    return token;\n  }\n  \n  function getUserFromToken() {\n    const token = getToken();\n    return token ? JSON.parse(atob(token.split('.')[1])).user : null;\n  }\n  \n  function removeToken() {\n    localStorage.removeItem('token');\n  }\n  \n  const tokenService = {\n    setToken,\n    getToken,\n    removeToken,\n    getUserFromToken\n  };\n\n  export default tokenService;","import tokenService from './tokenService';\n\nconst BASE_URL = '/api/users/';\n\n\nfunction getProfile(username){\n  console.log('getProfile calling')\n  return fetch(BASE_URL + username, {\n    headers: {\n      Authorization: \"Bearer \" + tokenService.getToken(), // <- since this will be called when we're logged in, send over the jwt token\n      // so the server knows who's making the request from the client\n    }\n  }).then(res => {\n    // This function happens when the browser recieves a response from the express server\n    if(res.ok) return res.json();\n    throw new Error('Error from getProfile Request, check the server terminal!')\n  })\n}\n\n\n// NOTE THIS IS configured to send of a multi/part form request\n// aka photo \nfunction signup(user) {\n  return fetch(BASE_URL + 'signup', {\n    method: 'POST',\n    body: user // This is assuming you are sending multiform-data aka uploading a photo\n  })\n  .then(res => {\n    if (res.ok) return res.json();\n    // Probably a duplicate email\n    \n    // Writing your error handling like this allows you to throw the error response \n    // to the catch block where signup occurs,  \n\n//     res.status(400).json({ err: \"Something went wrong\" }); notice err, and response.err match\n    return res.json().then(response => {\n      console.log(response)\n      throw new Error(response.err)\n    })\n  })\n  // Parameter destructuring!\n  .then(({token}) => tokenService.setToken(token));\n  // Setting our token in localStorage in our browser\n  // then we'll be able to use with every request!\n  // The above could have been written as\n  //.then((token) => token.token);\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + 'login', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(creds)\n  })\n  .then(res => {\n    // Valid login if we have a status of 2xx (res.ok)\n    if (res.ok) return res.json();\n    return res.json().then(response => {\n      console.log(response)\n      throw new Error(response.err)\n    })\n  })\n  .then(({token}) => tokenService.setToken(token));\n}\n\n\nconst userService = {\n  signup, \n  logout,\n  login,\n  getUser,\n  getProfile,\n};\n\nexport default userService;\n","import React, { useState } from \"react\";\nimport ErrorMessage from \"../../components/ErrorMessage/ErrorMessage\";\nimport { Button, Form, Grid, Header, Image, Segment } from \"semantic-ui-react\";\nimport userService from \"../../utils/userService\";\nimport { useNavigate } from \"react-router-dom\";\n\n\nfunction isPasswordMatch(passwordOne, passwordConf) {\n  return passwordOne === passwordConf;\n}\n\nexport default function SignUpPage(props) {\n  const [error, setError] = useState({\n    message: '',\n    passwordError: false\n  });\n\n  const [state, setState] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    passwordConf: \"\",\n  });\n\n  const [selectedFile, setSelectedFile] = useState(\"\");\n\n  function handleChange(e) {\n    setState({\n      ...state,\n      [e.target.name]: e.target.value,\n    });\n  }\n\n  const navigate = useNavigate();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    if (!isPasswordMatch(state.password, state.passwordConf)) return setError({ message: 'Passwords Must Match!', passwordError: true });\n    setError({ message: '', passwordError: false })\n\n    const formData = new FormData();\n\n    formData.append(\"photo\", selectedFile);\n\n    for (let key in state) {\n      formData.append(key, state[key]);\n    }\n\n    try {\n      await userService.signup(formData);\n\n      props.handleSignUpOrLogin();\n\n      navigate(\"/\");\n    } catch (err) {\n\n      console.log(err);\n      setError({ message: err.message, passwordError: false });\n    }\n  }\n\n  function handleFileInput(e) {\n    console.log(e.target.files, \" < - this is e.target.files!\");\n    setSelectedFile(e.target.files[0]);\n  }\n\n  return (\n    <Grid\n      textAlign=\"center\"\n      style={{ height: \"100vh\", width: \"100vw\" }}\n      verticalAlign=\"middle\"\n    >\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as=\"h2\" color=\"teal\" textAlign=\"center\">\n          <Image src=\"https://i.imgur.com/Ql22AuM.png\" /> Sign Up\n        </Header>\n        <Form onSubmit={handleSubmit}>\n          <Segment stacked>\n            <Form.Input\n              name=\"username\"\n              placeholder=\"username\"\n              value={state.username}\n              onChange={handleChange}\n              required\n            />\n            <Form.Input\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"email\"\n              value={state.email}\n              onChange={handleChange}\n              required\n            />\n            <Form.Input\n              error={error.passwordError}\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"password\"\n              value={state.password}\n              onChange={handleChange}\n              required\n            />\n            <Form.Input\n              error={error.passwordError}\n              name=\"passwordConf\"\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n              value={state.passwordConf}\n              onChange={handleChange}\n              required\n            />\n            <Form.Field>\n              <Form.Input\n                type=\"file\"\n                name=\"photo\"\n                placeholder=\"upload image\"\n                onChange={handleFileInput}\n              />\n            </Form.Field>\n            <Button type=\"submit\" className=\"btn\">\n              Signup\n            </Button>\n          </Segment>\n          {error.message ? <ErrorMessage error={error.message} /> : null}\n        </Form>\n      </Grid.Column>\n    </Grid>\n  );\n}","import React, { useState } from \"react\";\nimport \"./LoginPage.css\";\nimport ErrorMessage from \"../../components/ErrorMessage/ErrorMessage\";\nimport userService from \"../../utils/userService\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Image,\n  Message,\n  Segment,\n} from \"semantic-ui-react\";\n\nexport default function LoginPage(props) {\n  const [error, setError] = useState(\"\");\n  const [state, setState] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const navigate = useNavigate();\n\n  function handleChange(e) {\n    setState({\n      ...state,\n      [e.target.name]: e.target.value,\n    });\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    try {\n      await userService.login(state);\n      // Route to wherever you want!\n      props.handleSignUpOrLogin();\n\n      navigate(\"/\");\n\n    } catch (err) {\n      // Invalid user data (probably duplicate email)\n      // this is from the throw block in the userService.login first then function\n      setError(err.message);\n    }\n  }\n\n  return (\n      <Grid\n        textAlign=\"center\"\n        style={{ height: \"100vh\", width: \"100vw\" }}\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Header as=\"h2\" color=\"teal\" textAlign=\"center\">\n            <Image src=\"https://i.imgur.com/Ql22AuM.png\" /> Log-in to your\n            account\n          </Header>\n          <Form onSubmit={handleSubmit}>\n            <Segment stacked>\n              <Form.Input\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"email\"\n                value={state.email}\n                onChange={handleChange}\n                required\n              />\n              <Form.Input\n                name=\"password\"\n                type=\"password\"\n                placeholder=\"password\"\n                value={state.password}\n                onChange={handleChange}\n                required\n              />\n              <Button\n                color=\"teal\"\n                fluid\n                size=\"large\"\n                type=\"submit\"\n                className=\"btn\"\n              >\n                Login\n              </Button>\n            </Segment>\n          </Form>\n          <Message>\n            New to us? <Link to=\"/signup\">Sign Up</Link>\n          </Message>\n          {error ? <ErrorMessage error={error} /> : null}\n        </Grid.Column>\n      </Grid>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Header, Icon } from \"semantic-ui-react\";\n\nexport default function PageHeader({ loggedUser, handleLogout }) {\n    console.log(loggedUser, \"loggedUser in header\");\n    return (\n        <>\n            <Header as=\"h2\" floated=\"left\">\n                <Link to=\"/\">\n                    <Icon style={{ color: 'white' }} name=\"home\"></Icon>\n                </Link>\n            </Header>\n\n            <Header as=\"h2\" floated=\"center\">\n                {loggedUser ? (\n                    <>\n                        <Link to=\"/\"> Home </Link>\n                        {/* <Link to=\"/MyTeam\"> My Team </Link>\n                        <Link to=\"/Heatsheet\"> Heatsheet </Link> */}\n                    </>\n                ) : null}\n            </Header>\n\n            <Header as=\"h2\" floated=\"right\">\n                <Link to=\"\" onClick={handleLogout} style={{ fontSize: '30px', fontFamily: 'Nunito, sans-serif;', color: 'whitesmoke', textShadow: '2px 2px 4px black' }}>\n                    Logout\n                </Link>\n            </Header>\n            {/* <Link to={`/${loggedUser?.username}`}>Login</Link>  */}\n\n            {/* <Link to={`/${loggedUser?.username}`}>\n                    <Image\n                        src={\n                            loggedUser?.photoUrl\n                                ? loggedUser?.photoUrl\n                                : \"https://react.semantic-ui.com/images/wireframe/square-image.png\"\n                        }\n                        avatar\n                    ></Image>\n                </Link> */}\n        </>\n    );\n}","import React, { useState } from 'react';\nimport { Card, Form, Button, Segment } from \"semantic-ui-react\";\n\nexport default function SwimmerComponent({ swimmer, handleDeleteSwimmer }) {\n\n    const [setState] = useState(false);\n\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        const request = swimmer._id;\n        console.log(request, \"<- the deleteSwimmer request\")\n        handleDeleteSwimmer(request);\n        setState(false)\n    }\n\n\n    return (\n        <Card key={swimmer._id} raised>\n            <Segment textAlign='center'>\n                <p>Name: {swimmer.name}</p>\n                <p>Grade: {swimmer.grade}</p>\n                <p>Gender: {swimmer.gender}</p>\n                <p>Events: {swimmer.events}</p>\n            </Segment>\n            <Form onSubmit={handleSubmit} >\n                <Button type=\"submit\" color=\"red\">Delete Swimmer</Button>\n            </Form>\n        </Card>\n    )\n}\n\n\n\n\n        // <Table >\n        //     <TableHeader>\n        //         Name\n        //     </TableHeader>\n        //     <TableBody>\n        //         name={swimmer.name}\n        //     </TableBody>\n        //     <TableHeader>\n        //         Grade\n        //     </TableHeader>\n        //     <TableBody>\n        //         grade={swimmer.grade}\n        //     </TableBody>\n        //     <TableHeader>\n        //         Gender\n        //     </TableHeader>\n        //     <TableBody>\n        //         gender={swimmer.gender}\n        //     </TableBody>\n        //     <TableHeader>\n        //         Events\n        //     </TableHeader>\n        //     <TableBody>\n        //         events={swimmer.events}\n        //     </TableBody>\n        //     <TableHeader>\n        //         Delete\n        //     </TableHeader>\n        //     <TableBody>\n        //             <Button onSubmit={handleSubmit} type=\"submit\" color=\"red\">Delete Game</Button>\n        //     </TableBody>\n        // </Table>\n  ","import React from 'react';\nimport PageHeader from '../../components/Header/Header';\nimport SwimmerComponent from '../../components/Swimmer/Swimmer';\n\n\nexport default function MyTeam({ swimmer }) {\n    return (\n        <>\n            <PageHeader />\n            <h1>Swimmer Details</h1>\n            <SwimmerComponent swimmer={swimmer} />\n        </>\n    )\n}\n\n    // const [error, setError] = useState('');\n    // const [loading, setLoading] = useState(true);\n    // const [swimmer, setSwimmer] = useState({});\n\n    // const [swimmers, setSwimmers] = useState([]);\n\n    // async function getAllSwimmers() {\n    //     try {\n    //         const response = await swimmerAPI.getSwimmer();\n    //         setSwimmers([...response.data]);\n    //         setLoading(false);\n    //     } catch (err) {\n    //         setLoading(false);\n    //     }\n    // }\n\n    // useEffect(() => {\n\n    //     getAllSwimmers();\n    // }, []);\n\n\n    // async function handleAddSwimmer(swimmer) {\n    //     try {\n    //         setLoading(true);\n    //         const response = await swimmerAPI.create(swimmer);\n    //         console.log(response);\n    //         getAllSwimmers();\n    //         setLoading(false);\n    //     } catch (err) {\n    //         console.log(\"Error in the handleAddSwimmer function: \", err);\n    //     }\n    // }\n\n    // async function handleDeleteSwimmer(swimmerId) {\n    //     try {\n    //         const response = await swimmerAPI.deleteSwimmer(swimmerId);\n    //         console.log(response);\n    //         getAllSwimmers();\n    //     } catch (err) {\n    //         console.log(\"Error in the handleDeleteSwimmer function\");\n    //     }\n    // }\n\n\n\n// ======================Alt return========================\n\n\n//         <Grid centered>\n//             <Grid.Row>\n//                 <Grid.Column>\n//                     <PageHeader handleLogout={handleLogout} loggedUser={loggedUser} />\n//                     {/* <AddTeamForm value={team.name} /> */}\n//                 </Grid.Column>\n//             </Grid.Row>\n//             <Grid.Row>\n//                 <Grid.Column style={{ maxWidth: 450 }}>\n//                     <NewSwimmerForm handleAddSwimmer={handleAddSwimmer} />\n//                     {/* <SwimmerGallery\n//                     // swimmer={swimmer}\n//                     handleDeleteSwimmer={handleDeleteSwimmer}\n//                     /> */}\n//                 </Grid.Column>\n//             </Grid.Row>\n//             <Grid.Row>\n//                 <tr>\n//                     <th>Name</th>\n//                     <th>Grade</th>\n//                     <th>Gender</th>\n//                     <th>Events</th>\n//                     <th>Delete</th>\n//                 </tr>\n//             </Grid.Row>\n//             <Grid.Row>\n//                 <Grid.Column style={{ maxWidth: 450 }}>\n//                     {swimmers.map((swimmer) =>\n//                         <>\n//                             <tr>\n//                                 <td>{swimmer.name}</td>\n//                                 <td>{swimmer.grade}</td>\n//                                 <td>{swimmer.gender}</td>\n//                                 <td>{swimmer.events}</td>\n//                                 <td><button handleDeleteSwimmer={handleDeleteSwimmer}>Delete</button></td>\n//                             </tr>\n//                         </>\n//                     )}\n//                 </Grid.Column>\n//             </Grid.Row>\n//         </Grid>\n//     );\n// }\n\n","import React, { useState } from \"react\";\nimport { Card, Form, Button } from \"semantic-ui-react\";\n// import { useNavigate } from \"react-router-dom\";\n\nexport default function AddSwimmer({ handleAddSwimmer }) {\n\n    // const navigate = useNavigate();\n\n    const [state, setState] = useState({\n        name: \"\",\n        grade: \"\",\n        gender: \"\",\n        events: \"\",\n    });\n\n    function handleChange(e) {\n        setState({\n            ...state,\n            [e.target.name]: e.target.value,\n        });\n    }\n\n    function handleSubmit(e) {\n\n        e.preventDefault();\n        const requestData = state;\n        handleAddSwimmer(requestData);\n        setState({\n            name: \"\",\n            grade: \"\",\n            gender: \"\",\n            events: \"\",\n        })\n    }\n\n\n        return (\n            <Card style={{width:'70%',}}>\n                <Form onSubmit={handleSubmit}>\n                    <h2>Add a New Swimmer:</h2>\n                    <Form.Input\n                        className=\"form-control\"\n                        name=\"name\"\n                        value={state.name}\n                        placeholder=\"Name\"\n                        onChange={handleChange}\n                        required\n                    />\n                    <Form.Input\n                        className=\"form-control\"\n                        name=\"grade\"\n                        value={state.grade}\n                        placeholder=\"Grade\"\n                        onChange={handleChange}\n                        required\n                    />\n                    <Form.Input\n                        className=\"form-control\"\n                        name=\"gender\"\n                        value={state.gender}\n                        placeholder=\"Gender\"\n                        onChange={handleChange}\n                        required\n                    />\n                    <Form.Input\n                        className=\"form-control\"\n                        name=\"events\"\n                        value={state.events}\n                        placeholder=\"Events\"\n                        onChange={handleChange}\n                        required\n                    />\n                    <Button type=\"submit\" className=\"btn\">Add Swimmer</Button>\n                </Form>\n            </Card>\n        );\n    }","import React from 'react';\nimport { Card } from \"semantic-ui-react\";\nimport SwimmerComponent from '../Swimmer/Swimmer';\n\nexport default function SwimmerGallery({ swimmers, itemsPerRow, handleDeleteSwimmer }) {\n\n    return (\n        <>\n            <Card.Group itemsPerRow={itemsPerRow} stackable>\n                {swimmers.map((swimmer) => {\n                    return (\n                        <SwimmerComponent\n                            swimmer={swimmer}\n                            key={swimmer._id}\n                            handleDeleteSwimmer={handleDeleteSwimmer}\n                        />\n                    )\n                })}\n            </Card.Group>\n        </>\n    )\n}","import tokenService from \"./tokenService\";\n\nconst BASE_URL = \"/api/swimmer\";\n\nexport function create(swimmer) {\n    console.log('this is the swimmer', swimmer);\n    return fetch(BASE_URL, {\n        method: 'POST',\n        body: JSON.stringify(swimmer),\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + tokenService.getToken()\n        }\n    }).then( res => {\n        if(res.ok) return res.json()\n\n        throw new Error('Check your server terminal for error.')\n    }) \n}\n\n  export function deleteSwimmer(swimmerId) {\n    return fetch(`${BASE_URL}/${swimmerId}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + tokenService.getToken(),\n      },\n    }).then((res) => {\n      if (res.ok) return res.json();\n\n      throw new Error(res.error, '<< res.error from deleteSwimmer(): swimmerAPI');\n    });\n  }\n\n  export function getSwimmers() {\n    return fetch(BASE_URL, {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + tokenService.getToken(),\n      },\n    }).then((res) => {\n      if (res.ok) return res.json();\n  \n      return res.json().then((response) => {\n        console.log(response);\n        throw new Error(response.err, '<< response.err create(): swimmerAPI');\n      });\n    });\n  }","import React, { useState, useEffect } from 'react';\nimport PageHeader from \"../../components/Header/Header\";\nimport { Grid, Container } from 'semantic-ui-react';\n\nimport \"./Home.css\";\nimport AddSwimmer from '../../components/AddSwimmer/AddSwimmer';\nimport SwimmerGallery from '../../components/SwimmerGallery/SwimmerGallery';\nimport * as swimmerAPI from \"../../utils/swimmerAPI\"\n\nexport default function Home({ handleLogout }) {\n\n    const [swimmers, setSwimmers] = useState([]);\n\n    async function getSwimmers() {\n        try {\n            const response = await swimmerAPI.getSwimmers();\n            setSwimmers([...response.data]);\n        } catch (err) {\n            console.log(err, '<-erroe in getSwimmers');\n        }\n    }\n\n    useEffect(() => {\n\n        getSwimmers();\n    }, []);\n\n    async function handleAddSwimmer(swimmer) {\n        try {\n            const response = await swimmerAPI.create(swimmer);\n            console.log(response);\n            getSwimmers();\n            // setLoading(false);\n        } catch (err) {\n            console.log(\"Error in the handleAddSwimmer function: \", err);\n        }\n    }\n\n    async function handleDeleteSwimmer(swimmer) {\n        try {\n            const response = await swimmerAPI.deleteSwimmer(swimmer);\n            console.log(response);\n            getSwimmers();\n        } catch (err) {\n            console.log(\"Error in the handleDeleteSwimmer function\");\n        }\n    }\n\n    return (\n        <Container className='backgroundImg'>\n            <img className='backgroundImg' src={'https://i.imgur.com/UeA0BjR.jpg'} alt=\"img\" >\n            </img>\n            <PageHeader handleLogout={handleLogout} />\n            <br />\n            <div className=\"WelcomeText\">\n                <h1>Welcome to Swimmingly!</h1>\n                <h3>Swimmingly is an easy team manager that tracks your swim teams members as well as their times and events</h3>\n                <br />\n            </div>\n            <Grid>\n                <Grid.Row centered>\n                    <AddSwimmer className=\"AddSwimmer\" handleAddSwimmer={handleAddSwimmer} />\n                </Grid.Row>\n                <Grid.Row centered>\n                    <Grid.Column style={{ maxWidth: 750 }}>\n                        <SwimmerGallery\n                            swimmers={swimmers}\n                            handleDeleteSwimmer={handleDeleteSwimmer}\n                            itemsPerRow={5}\n                        />\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </Container>\n    );\n}\n","import React, { useState } from \"react\";\nimport { Navigate, Route, Routes } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport SignupPage from \"../SignupPage/SignupPage\";\nimport LoginPage from \"../LoginPage/LoginPage\";\n// import ProfilePage from \"../Profile/Profile\";\n\nimport userService from \"../../utils/userService\";\n\n// import HeatsheetPage from \"../Heatsheet/Heatsheet\";\nimport MyTeamPage from \"../MyTeam/MyTeam\";\nimport Home from \"../Home/Home\";\n\nfunction App() {\n  const [user, setUser] = useState(userService.getUser()); // getUser decodes our JWT token, into a javascript object\n  // this object corresponds to the jwt payload which is defined in the server signup or login function that looks like\n  // this  const token = createJWT(user); // where user was the document we created from mongo\n\n  function handleSignUpOrLogin() {\n    setUser(userService.getUser()); // getting the user from localstorage decoding the jwt\n  }\n\n  function handleLogout() {\n    userService.logout();\n    setUser(null);\n  }\n\n  if (user) {\n    return (\n      <Routes>\n        <Route\n          path=\"/\"\n          element={<Home loggedInUser={user} handleLogout={handleLogout} />}\n        />\n        <Route\n          path=\"/:_id\"\n          element={<MyTeamPage loggedInUser={user} handleLogout={handleLogout} />}\n        />\n        <Route\n          path=\"/login\"\n          element={<LoginPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n        />\n        <Route\n          path=\"/signup\"\n          element={<SignupPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n        />\n        {/* <Route\n          path=\"/:username\"\n          element={<ProfilePage loggedUser={user} handleLogout={handleLogout} />}\n        /> */}\n        {/* <Route\n          path=\"/heatsheet\"\n          element={<HeatsheetPage loggedUser={user} handleLogout={handleLogout} />}\n        /> */}\n      </Routes>\n    );\n  }\n\n// If user is not logged in, will only be able to do these\n  return (\n    <Routes>\n      <Route\n        path=\"/login\"\n        element={<LoginPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n      />\n      <Route\n        path=\"/signup\"\n        element={<SignupPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n      />\n      <Route path=\"/*\" element={<Navigate to=\"/login\" />} />\n    </Routes>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './pages/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router><App/></Router>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}